package lab1_416;

import java.io.*;
import java.net.*;
import java.util.Random;


public class DnsClient {

    public static void main(String[] args) {

        //default values for the various arguments
        int timeout = 5;
        int max_retries = 3;
        int port = 53;
        boolean a = true;
        boolean mx = false;
        boolean ns = false;
        boolean t = false;
        boolean r = false;
        boolean p = false;
        boolean validArg = false;
        String serverIP = "";

        // Checks if there are less than two arguments, indicating an improper query
        if (args.length < 2) {
            System.out.println("ERROR\tIncorrect input syntax: Server and name must be specified as inputs.");
            properInputFormat();
        }
        // Gets the address of the dns server
        if (args[args.length - 2].charAt(0) == '@') {
            serverIP = args[args.length - 2].substring(1);
        } else {
            System.out.println("ERROR\tIncorrect input syntax: \"@\" required at the start of the server address.");
            properInputFormat();
        }

        // Gets the name of the requested server
        String name = args[args.length - 1];

        // Converts the ip address to a byte array
        String[] stringIP = serverIP.split("\\.");
        byte[] ipAddr = new byte[stringIP.length];
        for (int i = 0; i < stringIP.length; i++) {
            int num = Integer.parseInt(stringIP[i]);
            if(num < 0 || num > 255) {
                System.out.println("ERROR\tInvalid IP Address");
                System.exit(1);
            }
            ipAddr[i] = (byte) num;
        }

        // Parses the given arguments
        for (int i = 0; i < args.length - 2; i++) {
            validArg = false;
            if (args[i].equals("-t") && t == false) {
                i++;
                timeout = Integer.parseInt(args[i]);
                t = true;
                validArg = true;
            } else if (args[i].equals("-r") && r == false) {
                i++;
                max_retries = Integer.parseInt(args[i]);
                r = true;
                validArg = true;
            } else if (args[i].equals("-p") && p == false) {
                i++;
                port = Integer.parseInt(args[i]);
                p = true;
                validArg = true;
            } else if (args[i].equals("-mx") && mx == false) {
                mx = true;
                a = false;
                validArg = true;
            } else if (args[i].equals("-ns") && ns == false) {
                ns = true;
                a = false;
                validArg = true;
            }

            if (!validArg) {
                System.out.println("ERROR\tIncorrect input syntax: Invalid argument.");
                properInputFormat();
            }
        }

        if (mx && ns) {
            System.out.println("ERROR\tIncorrect input syntax: use either mx or ns, not both.");
            properInputFormat();
        }

        // Creates an inet address from the byte array containing the parsed ip
        InetAddress ipAddress = null;
        try {
            ipAddress = InetAddress.getByAddress(ipAddr);
        } catch (UnknownHostException e1) {
            e1.printStackTrace();
            System.out.println("ERROR\tFailed to create an InetAddress");
            System.exit(1);
        }

        // Makes a UDP socket with the appropriate timeout
        DatagramSocket clientSocket = null;
        try {
            clientSocket = new DatagramSocket();
            clientSocket.setSoTimeout(timeout * 1000);
        } catch (SocketException e1) {
            e1.printStackTrace();
            System.out.println("ERROR\tFailed to create a UDP socket");
            System.exit(1);
        }

        // Creates byte arrays to store the sent and received data
        byte[] sendData = new byte[1024];
        byte[] receiveData = new byte[1024];

        // Creates the header for the query
        Random rand = new Random();
        int randn = rand.nextInt(65536); // Random ID number
        sendData[0] = (byte) randn;
        sendData[1] = (byte) (randn >> 8);
        sendData[2] = 0x01;           // QR = 0 (query), OPCODE = 0 (standard query), AA, TC, RD = 1 (desire recursion)
        sendData[3] = 0;              // RA, Z = 0, RCODE = 0 (no error condition)
        sendData[4] = 0;
        sendData[5] = 0x01;           // QDCOUNT = 1 (16 bit number, number of entries in the question section)
        sendData[6] = 0;
        sendData[7] = 0;              // ANCOUNT (16 bit number, number of entries in the answer section)
        sendData[8] = 0;
        sendData[9] = 0;              // NSCOUNT (16 bit number, number of name server resource records)
        sendData[10] = 0;
        sendData[11] = 0;             // ARCOUNT (16 bit number, number of entries in the additional records section)


        // QNAME Section
        // Splits the name into labels separated by "."
        String[] stringName = name.split("\\.");
        int length = 12;
        for (int i = 0; i < stringName.length; i++) {
            // Adds the number of characters in the name label
            sendData[length] = (byte) stringName[i].length();
            length++;
            for (int j = 0; j < stringName[i].length(); j++) {
                // Converts each character in the label to the corresponding ASCII code
                sendData[length] = (byte) stringName[i].charAt(j);
                length++;
            }
        }
        // Indicates the end of the QNAME section
        sendData[length] = 0x00;
        length++;

        // QTYPE Section
        // Specifies the type of query
        sendData[length] = 0x00;
        length++;
        if (a == true)
            sendData[length] = 0x01;
        else if (ns == true)
            sendData[length] = 0x02;
        else //mx == true
            sendData[length] = 0x0f;
        length++;

        // QCLASS Section
        // 16 bit code specifying the class of the query, 1 represents an Internet address
        sendData[length] = 0x00;
        length++;
        sendData[length] = 0x01;

        // Recopies the array in an array of smaller length
        byte[] sendData2 = new byte[length+1];
        java.lang.System.arraycopy(sendData, 0, sendData2, 0, length+1);

        // Packages the data bytes into packets to be sent
        DatagramPacket sendPacket = new DatagramPacket(sendData2, sendData2.length, ipAddress, port);
        DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);

        System.out.println("DnsClient sending request for " + name);
        System.out.println("Server: " + serverIP);
        if (a) {
            System.out.println("Request type: A");
        } else if (mx) {
            System.out.println("Request type: MX");
        } else if (ns) {
            System.out.println("Request type: NS");
        }

        int num_tries = 0;
        boolean success = false;

        // Takes the current time (before the request is sent)
        long time_start = System.currentTimeMillis();

        // Tries sending the packet and, in the event of failure, retries a set number of times
        while (num_tries < max_retries && !success) {
            try {
                clientSocket.send(sendPacket);
                clientSocket.receive(receivePacket);
                success = true;
            } catch (Exception e) {
                num_tries++;
            }
        }

        // If successful, the time taken is printed
        if (success) {
            long time_end = System.currentTimeMillis();
            long time = time_end - time_start;
            System.out.println("Response received after " + (double) time / 1000 + " seconds (" + num_tries + " retries)");
            parseResponse(receiveData, randn, length);
        } else {
            System.out.println("ERROR\tMaximum number of retries (" + num_tries + ") exceeded");
        }
    }

    // Method used to parse the response
    static void parseResponse(byte[] receiveData, int id, int index) {

        // Checks that the received packet has the same ID has the sent packet
        if (receiveData[0] != (byte) id || receiveData[1] != (byte) (id >> 8))
            System.out.println("ERROR\tResponse ID does not match query ID");

        // Checks if authoritative
        String auth;
        if ((receiveData[2] & 0x40) == 0x40) {
            auth = "auth";
        } else {
            auth = "noauth";
        }

        // Checks various header flags
        byte truncated, ra;
        truncated = (byte) (receiveData[2] & 0x20);
        ra = (byte) (receiveData[3] & 0x80);

        // If recursive queries are not supported, an error message is printed
        if (ra != (byte) 0x80)
            System.out.println("ERROR\tServer does not support recursive queries");

        // Checks the RCODE, printing various error messages if it is not 0 (no error condition)
        int RCODE = (receiveData[3] & 0x0F);
        if (RCODE != 0x0) {
            if (RCODE == 0x1)
                System.out.println("ERROR\t[RCODE: 1] Format error");
            else if (RCODE == 0x2)
                System.out.println("ERROR\t[RCODE: 2] Server failure");
            else if (RCODE == 0x3)
                System.out.println("NOTFOUND\t[RCODE: 3] Referenced domain name does not exist");
            else if (RCODE == 0x4)
                System.out.println("ERROR\t[RCODE: 4] Not implemented");
            else // 0x5
                System.out.println("ERROR\t[RCODE: 5] Refused");
            System.exit(1);
        }

        // Gets the number of name server records in the Authority section
        int nsCount = (receiveData[8] << 8) | receiveData[9];

        // Gets the number of records in the Additional records section
        int arCount = (receiveData[10] << 8) | receiveData[11];

        // Gets the number of records in the Answer section
        int anCount = (receiveData[6] << 8) | receiveData[7];
        System.out.println("***Answer Section (" + anCount + " records)***");

        //Length is the length of the sent Header + Question
        int answerIndex = index + 1;

        // Parses the Answer Section
        answerIndex = parseSection(receiveData, anCount, answerIndex, auth, true);

        // Parses the Authority Section (in order to know the length of it)
        answerIndex = parseSection(receiveData, nsCount, answerIndex, auth, false);

        System.out.println("***Additional Section (" + arCount + " records)***");

        // Parses the Additional Section
        answerIndex = parseSection(receiveData, arCount, answerIndex, auth, true);
    }

    // Method used to parse a section of the packet, processing the various records contained
    public static int parseSection(byte[] receiveData, int count, int answerIndex, String auth, boolean print) {

        // Iterates through all the records in the section
        for (int i = 0; i < count; i++) {

            intString nameIndex = new intString();
            nameIndex.s = "";
            nameIndex.index = answerIndex;
            nameIndex = getName(receiveData, nameIndex.index);
            answerIndex = nameIndex.index;

            // Type
            int type = (receiveData[answerIndex] & 0xFF) << 8 | (receiveData[answerIndex + 1] & 0xFF);
            answerIndex += 2;

            // Class
            int clss = (receiveData[answerIndex] & 0xFF) << 8 | (receiveData[answerIndex + 1] & 0xFF);
            if (clss != 1){
                System.out.println("ERROR\tA record has an incorrect class value");
            }
            answerIndex += 2;

            // Time to live
            int ttl = ((receiveData[answerIndex] & 0xFF) << 24 | receiveData[answerIndex + 1] & 0xFF) << 16 | (receiveData[answerIndex + 2] & 0xFF) << 8 | (receiveData[answerIndex + 3] & 0xFF);
            answerIndex += 4;

            // Length of the RDATA field
            int rdLength = (receiveData[answerIndex] & 0xFF) << 8 | (receiveData[answerIndex + 1] & 0xFF);
            answerIndex += 2;

            // Gathers the data in the RDATA field
            byte[] rdData = new byte[rdLength];
            int rDataIndex = answerIndex;
            for (int j = 0; j < rdLength; j++) {
                rdData[j] = receiveData[answerIndex];
                answerIndex++;
            }
            if (print) {
                // Type A
                if (type == 1) {
                    // RDATA is ip address for type A
                    String ip_address = "";
                    ip_address += Integer.toString(rdData[0] & 0xFF);
                    for (int j = 1; j < rdLength; j++) {
                        ip_address += ".";
                        ip_address += Integer.toString((rdData[j] & 0xFF));
                    }

                    System.out.println("IP \t" + ip_address + "\t" + ttl + "\t" + auth);
                }

                // NS
                else if (type == 2) {
                    // RDATA is server name for NS
                    nameIndex = getName(receiveData, rDataIndex);
                    String alias = nameIndex.s;
                    System.out.println("NS \t" + alias + "\t" + ttl + "\t" + auth);
                }

                // CNAME
                else if (type == 5) {
                    // RDATA is name of the alias for CNAME
                    nameIndex = getName(receiveData, rDataIndex);
                    String alias = nameIndex.s;
                    System.out.println("CNAME \t" + alias + "\t" + ttl + "\t" + auth);
                }
                // MX
                else if (type == 15) {
                    // RDATA is preference/exchange for MX
                    int pref = (receiveData[rDataIndex] << 8) | receiveData[rDataIndex + 1];
                    rDataIndex += 2;
                    nameIndex = getName(receiveData, rDataIndex);
                    String alias = nameIndex.s;
                    System.out.println("MX \t" + alias + "\t" + pref + "\t" + ttl + "\t" + auth);
                }
            }
        }
        return answerIndex;
    }

    // Method used to parse domain names, it returns an index (used for the calculation of the length of the section) and the name
    static intString getName(byte[] receiveData, int answerIndex) {

        intString nameIndex = new intString();

        // Checks if it starts with a pointer
        if ((receiveData[answerIndex] & 0xFF) >= 0xC0) {
            nameIndex.s = getNameFromPointer(receiveData, answerIndex);
            answerIndex += 2;
            nameIndex.index = answerIndex;
            return nameIndex;
        }

        nameIndex.s = "";

        // Gets the name (or a portion of it)
        while (receiveData[answerIndex] != 0x00 && (receiveData[answerIndex] & 0xFF) < 0xc0) {
            int lengthWord = receiveData[answerIndex++];
            for (int i = 0; i < lengthWord; i++) {
                nameIndex.s += Character.toString((char) (receiveData[answerIndex++] & 0xFF));
            }
            nameIndex.s += ".";
        }

        // Checks if there is a pointer after the name
        if ((receiveData[answerIndex] & 0xFF) >= 0xc0) {
            nameIndex.s += getNameFromPointer(receiveData, answerIndex);
            answerIndex += 2;
            nameIndex.index = answerIndex;
            return nameIndex;
        }

        //remove the last "."
        nameIndex.s = nameIndex.s.substring(0, nameIndex.s.length() - 1);

        nameIndex.index = answerIndex;
        return nameIndex;
    }

    // Method used to get name data from a pointer
    static String getNameFromPointer(byte[] receiveData, int answerIndex) {

        // Gets the value of the pointer
        int offset = (receiveData[answerIndex] & 0xFF) << 8 | (receiveData[answerIndex + 1] & 0xFF);

        // Removes the leading "11" from the pointer
        offset -= 0xc000;

        // Gets the name the pointer points to
        String name = "";
        while (receiveData[offset] != 0x00) {
            int lengthWord = receiveData[offset++];
            for (int i = 0; i < lengthWord; i++) {
                name += Character.toString((char) (receiveData[offset++] & 0xFF));
            }
            name += ".";
        }

        // Remove the last "."
        name = name.substring(0, name.length() - 1);

        return name;

    }


    static void properInputFormat() {
        System.out.println("Proper argument format (parameters in [] are optional): [-t] [-r] [-p] [-nx || -mx] @server name");
        System.exit(1);
    }

}

class intString {
    public String s;
    public int index;
}